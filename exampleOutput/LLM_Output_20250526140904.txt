LLM File Collector Output
Root Directory: C:\Users\Çağrı\Downloads\OTP\FolderToLLM
Execution Timestamp: 2025-05-26 14:09:04
==================================================

DIRECTORY STRUCTURE:
--------------------------------------------------
├── exampleOutput
├── CollectAndPrint.ps1
├── folderToLLM.bat
├── Format-OutputString.ps1
├── Get-DirectoryStructure.ps1
├── Get-FilteredFiles.ps1
├── README.md
└── Read-TextFileContent.ps1

==================================================
FILE CONTENTS:
--------------------------------------------------

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\CollectAndPrint.ps1 (4638 bytes) ---
# CollectAndPrint.ps1 - Main script to collect directory structure and file contents.

[CmdletBinding()]
param(
    # Default root path to the current directory where the script is run.
    [string]$RootPath = (Get-Location).Path,

    # Folders to include. If specified, only files in these folders (and subfolders) are processed.
    [string[]]$IncludeFolderPaths = @(),

    # Folders to exclude. Default to "node_modules". User can override or add more.
    [string[]]$ExcludeFolderPaths = @("node_modules"), # Default exclusion

    # File extensions to include. If specified, only files with these extensions are processed.
    [string[]]$IncludeExtensions = @(),

    # File extensions to exclude. Default to ".env". User can override or add more.
    [string[]]$ExcludeExtensions = @(".env"), # Default exclusion

    # Minimum file size in bytes. -1 for no limit.
    [long]$MinFileSize = -1,

    # Maximum file size in bytes. Default to 1MB (1024 * 1024 bytes). -1 for no limit.
    [long]$MaxFileSize = 1048576, # Default max size: 1MB
    
    # Prefix for the output file name.
    [string]$OutputFileNamePrefix = "LLM_Output"
)

# Dot-source the helper scripts to make their functions available.
# Ensure these .ps1 files are in the same directory as this script, or provide full paths.
try {
    . "$PSScriptRoot\Get-DirectoryStructure.ps1"
    . "$PSScriptRoot\Get-FilteredFiles.ps1"
    . "$PSScriptRoot\Read-TextFileContent.ps1"
    . "$PSScriptRoot\Format-OutputString.ps1"
}
catch {
    Write-Error "Failed to load helper scripts. Ensure they are in the same directory: $PSScriptRoot. Error: $($_.Exception.Message)"
    exit 1
}

Write-Host "Processing directory: $RootPath"
Write-Host "Effective ExcludeFolderPaths: $($ExcludeFolderPaths -join ', ')"
Write-Host "Effective ExcludeExtensions: $($ExcludeExtensions -join ', ')" # This is from CollectAndPrint's scope
Write-Host "Effective MaxFileSize: $MaxFileSize bytes" # This is from CollectAndPrint's scope


# 1. Get Directory Structure
Write-Host "Generating directory structure..."
$directoryStructureString = Get-DirectoryStructureFormatted -Path $RootPath

# 2. Get Filtered Files
Write-Host "Filtering files..."
# Normalize extension filters (ensure they start with a dot and are lowercase)
$normalizedIncludeExtensions = @($IncludeExtensions | ForEach-Object { ($_.ToLowerInvariant() -replace '^\*?(?!\.)','.') })
$normalizedExcludeExtensions = @($ExcludeExtensions | ForEach-Object { ($_.ToLowerInvariant() -replace '^\*?(?!\.)','.') })

# Ensure $filteredFileItems is always an array.
# Explicitly pass parameters to Get-FilteredFileItems.
$filteredFileItems = @(Get-FilteredFileItems -RootPath $RootPath `
                                            -IncludeFolders $IncludeFolderPaths `
                                            -ExcludeFolders $ExcludeFolderPaths `
                                            -IncludeExtensions $normalizedIncludeExtensions `
                                            -ExcludeExtensions $normalizedExcludeExtensions `
                                            -MinSize $MinFileSize `
                                            -MaxSize $MaxFileSize) # This is the MaxFileSize from CollectAndPrint's param block

Write-Host "Found $($filteredFileItems.Count) files matching criteria."

# 3. Format the output (File contents will be read by Format-OutputString via the scriptblock)
Write-Host "Formatting output..."
$finalOutput = New-FormattedOutput -RootDirectory $RootPath `
    -DirectoryStructure $directoryStructureString `
    -FileItems $filteredFileItems `
    -ContentReader { param($FileItem) Read-SafeTextFileContent -FileItem $FileItem } # Pass our reader function

# 4. Output to File
$timestamp = Get-Date -Format "yyyyMMddHHmmss"
$outputFilePath = Join-Path -Path $RootPath -ChildPath "$($OutputFileNamePrefix)_$timestamp.txt"

try {
    Write-Host "Writing output to: $outputFilePath"
    $finalOutput | Out-File -FilePath $outputFilePath -Encoding UTF8 -Force
    Write-Host "Successfully generated output file."
}
catch {
    Write-Error "Failed to write output file: $($_.Exception.Message)"
}

# Optional: Display a snippet or confirmation
if ((Test-Path $outputFilePath) -and (Get-Item $outputFilePath).Length -lt 20000) { # If file is small enough
    Write-Host "`n--- Output File Preview (first 20 lines) ---"
    Get-Content $outputFilePath -TotalCount 20
} elseif (Test-Path $outputFilePath) {
    Write-Host "`nOutput file is large. Preview skipped."
}

Write-Host "Script finished."
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\CollectAndPrint.ps1 ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\folderToLLM.bat (482 bytes) ---
@echo off
REM MODIFY THIS SECTION CAREFULLY!
REM Full path to the CollectAndPrint.ps1 script:
set "MAIN_SCRIPT_PATH=C:\Tools\FolderToLLM\CollectAndPrint.ps1"

REM Run the main script using PowerShell.exe and pass all arguments (%*).
REM -NoProfile: Does not load the PowerShell profile, starts faster.
REM -ExecutionPolicy Bypass: Temporarily relaxes the execution policy (use with caution).
powershell.exe -NoProfile -ExecutionPolicy Bypass -File "%MAIN_SCRIPT_PATH%" %*
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\folderToLLM.bat ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Format-OutputString.ps1 (1873 bytes) ---
# Format-OutputString.ps1

function New-FormattedOutput {
    # Function to create the final formatted output string.
    param(
        [string]$RootDirectory,
        [string]$DirectoryStructure,
        [System.Collections.IEnumerable]$FileItems, # Collection of FileInfo objects
        [scriptblock]$ContentReader # Scriptblock to call for reading content, e.g., { Read-SafeTextFileContent -FileItem $_ }
    )

    $outputBuilder = New-Object System.Text.StringBuilder

    [void]$outputBuilder.AppendLine("LLM File Collector Output")
    [void]$outputBuilder.AppendLine("Root Directory: $RootDirectory")
    [void]$outputBuilder.AppendLine("Execution Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')")
    [void]$outputBuilder.AppendLine("=" * 50)
    [void]$outputBuilder.AppendLine()
    [void]$outputBuilder.AppendLine("DIRECTORY STRUCTURE:")
    [void]$outputBuilder.AppendLine("-" * 50)
    [void]$outputBuilder.AppendLine($DirectoryStructure)
    [void]$outputBuilder.AppendLine()
    [void]$outputBuilder.AppendLine("=" * 50)
    [void]$outputBuilder.AppendLine("FILE CONTENTS:")
    [void]$outputBuilder.AppendLine("-" * 50)
    [void]$outputBuilder.AppendLine()

    if ($FileItems) {
        foreach ($fileItem in $FileItems) {
            [void]$outputBuilder.AppendLine("--- START: $($fileItem.FullName) ($($fileItem.Length) bytes) ---")
            $content = . $ContentReader -FileItem $fileItem # Invoke the provided scriptblock
            [void]$outputBuilder.AppendLine($content)
            [void]$outputBuilder.AppendLine("--- END: $($fileItem.FullName) ---")
            [void]$outputBuilder.AppendLine()
        }
    } else {
        [void]$outputBuilder.AppendLine("No files matched the criteria or were found.")
    }
    
    return $outputBuilder.ToString()
}

# Removed Export-ModuleMember
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Format-OutputString.ps1 ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Get-DirectoryStructure.ps1 (2183 bytes) ---
# Get-DirectoryStructure.ps1

function Get-DirectoryStructureFormatted {
    # Function to recursively get the directory structure as a formatted string.
    param(
        [string]$Path,
        [string]$Indent = ""
    )

    $childItems = Get-ChildItem -Path $Path -ErrorAction SilentlyContinue
    # Separate directories and files and sort them by name for consistent order
    $directories = $childItems | Where-Object {$_.PSIsContainer} | Sort-Object Name
    $files = $childItems | Where-Object {!$_.PSIsContainer} | Sort-Object Name
    
    $outputLines = @() # Use an array to build lines
    
    $totalChildrenCount = $directories.Count + $files.Count
    $processedChildrenCount = 0

    # Process directories
    foreach ($dir in $directories) {
        $processedChildrenCount++
        $isThisChildTheVeryLast = ($processedChildrenCount -eq $totalChildrenCount)
        
        # Determine the prefix for the current directory entry
        $linePrefix = if ($isThisChildTheVeryLast) { "└── " } else { "├── " }
        $outputLines += "$Indent$linePrefix$($dir.Name)" # Removed backtick before $()
        
        # Determine the indent for the children of this directory
        $childIndentContinuation = if ($isThisChildTheVeryLast) { "    " } else { "│   " }
        $recursiveResult = Get-DirectoryStructureFormatted -Path $dir.FullName -Indent ($Indent + $childIndentContinuation)
        
        if (-not [string]::IsNullOrEmpty($recursiveResult)) {
            # Add the multi-line result from recursion to our output lines
            $outputLines += $recursiveResult
        }
    }

    # Process files
    foreach ($file in $files) {
        $processedChildrenCount++
        $isThisChildTheVeryLast = ($processedChildrenCount -eq $totalChildrenCount)
        
        # Determine the prefix for the current file entry
        $linePrefix = if ($isThisChildTheVeryLast) { "└── " } else { "├── " }
        $outputLines += "$Indent$linePrefix$($file.Name)" # Removed backtick before $()
    }

    # Join all collected lines with newlines
    return $outputLines -join "`n"
}
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Get-DirectoryStructure.ps1 ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Get-FilteredFiles.ps1 (6041 bytes) ---
# Get-FilteredFiles.ps1

function Get-FilteredFileItems {
    # Function to get file items based on various filter criteria.
    param(
        [string]$RootPath,
        [string[]]$IncludeFolders = @(),
        [string[]]$ExcludeFolders = @(),
        [string[]]$IncludeExtensions = @(), 
        [string[]]$ExcludeExtensions = @(), 
        [long]$MinSize = -1, 
        [long]$MaxSize = -1  
    )

    Write-Host "DEBUG: Get-FilteredFileItems called." -ForegroundColor Yellow
    Write-Host "DEBUG: RootPath: $RootPath" -ForegroundColor Yellow
    Write-Host "DEBUG: IncludeFolders: $($IncludeFolders -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: ExcludeFolders: $($ExcludeFolders -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: IncludeExtensions: $($IncludeExtensions -join ', ')" -ForegroundColor Cyan # Critical for this issue
    Write-Host "DEBUG: ExcludeExtensions: $($ExcludeExtensions -join ', ')" -ForegroundColor Yellow
    Write-Host "DEBUG: MinSize: $MinSize, MaxSize: $MaxSize" -ForegroundColor Yellow

    $allFiles = Get-ChildItem -Path $RootPath -Recurse -File -ErrorAction SilentlyContinue
    Write-Host "DEBUG: Found $($allFiles.Count) total files initially in $RootPath." -ForegroundColor Yellow

    # Using a generic list for adding items
    $filteredFileResult = New-Object System.Collections.Generic.List[System.IO.FileInfo]

    foreach ($file in $allFiles) {
        $currentFileNameForDebug = $file.Name
        $currentFileExtForDebug = $file.Extension.ToLowerInvariant()
        # Write-Host "DEBUG: ----- Processing File: '$($file.FullName)' (Ext: '$currentFileExtForDebug') -----" -ForegroundColor Magenta
        
        $shouldProcess = $true
        [string]$reasonForFiltering = "Passed initial check."

        # Folder Include Filter
        if ($IncludeFolders.Count -gt 0) {
            $matchIncludeFolder = $false
            foreach ($incFolder in $IncludeFolders) {
                $fullIncFolderPath = Join-Path $RootPath $incFolder
                $pattern = if ($incFolder.EndsWith('\*') -or $incFolder.EndsWith('/*')) { $fullIncFolderPath.Replace('\*','\*').Replace('/*','\*') } else { $fullIncFolderPath + '\*' }
                if ($file.DirectoryName -like $pattern -or $file.DirectoryName -eq $fullIncFolderPath) {
                    $matchIncludeFolder = $true; break
                }
            }
            if (-not $matchIncludeFolder) {
                $shouldProcess = $false; $reasonForFiltering = "Did not match IncludeFolders: '$($IncludeFolders -join ", ")'"
            }
        }

        # Folder Exclude Filter
        if ($shouldProcess -and $ExcludeFolders.Count -gt 0) {
            foreach ($excFolder in $ExcludeFolders) {
                $fullExcFolderPath = Join-Path $RootPath $excFolder
                $pattern = if ($excFolder.EndsWith('\*') -or $excFolder.EndsWith('/*')) { $fullExcFolderPath.Replace('\*','\*').Replace('/*','\*') } else { $fullExcFolderPath + '\*' }
                if ($file.DirectoryName -like $pattern -or $file.DirectoryName -eq $fullExcFolderPath) {
                    $shouldProcess = $false; $reasonForFiltering = "Matched ExcludeFolders: '$excFolder'"; break
                }
            }
        }

        # Extension Include Filter
        if ($shouldProcess -and $IncludeExtensions.Count -gt 0) {
            # Write-Host "DEBUG:   ExtIncl Check for '$currentFileNameForDebug'. FileExt: '$currentFileExtForDebug'. TargetExts: '$($IncludeExtensions -join '; ')'" -ForegroundColor Cyan
            if (-not ($IncludeExtensions -contains $currentFileExtForDebug)) {
                $shouldProcess = $false
                $reasonForFiltering = "Ext '$currentFileExtForDebug' NOT IN IncludeExtensions '$($IncludeExtensions -join '; ')'."
                # Write-Host "DEBUG:   '$currentFileNameForDebug' FAILED IncludeExtensions. Reason: $reasonForFiltering" -ForegroundColor Red
            } else {
                # Write-Host "DEBUG:   '$currentFileNameForDebug' PASSED IncludeExtensions." -ForegroundColor Green
            }
        }

        # Extension Exclude Filter
        if ($shouldProcess -and $ExcludeExtensions.Count -gt 0) {
            # Write-Host "DEBUG:   ExtExcl Check for '$currentFileNameForDebug'. FileExt: '$currentFileExtForDebug'. TargetExts: '$($ExcludeExtensions -join '; ')'" -ForegroundColor Cyan
            if ($ExcludeExtensions -contains $currentFileExtForDebug) {
                $shouldProcess = $false
                $reasonForFiltering = "Ext '$currentFileExtForDebug' IN ExcludeExtensions '$($ExcludeExtensions -join '; ')'."
                # Write-Host "DEBUG:   '$currentFileNameForDebug' FAILED ExcludeExtensions. Reason: $reasonForFiltering" -ForegroundColor Red
            } else {
                # Write-Host "DEBUG:   '$currentFileNameForDebug' PASSED ExcludeExtensions." -ForegroundColor Green
            }
        }

        # Min Size Filter
        if ($shouldProcess -and $MinSize -ge 0) {
            if ($file.Length -lt $MinSize) {
                $shouldProcess = $false; $reasonForFiltering = "Size $($file.Length) is less than MinSize $MinSize."
            }
        }

        # Max Size Filter
        if ($shouldProcess -and $MaxSize -ge 0) {
            if ($file.Length -gt $MaxSize) {
                $shouldProcess = $false; $reasonForFiltering = "Size $($file.Length) is greater than MaxSize $MaxSize."
            }
        }

        if ($shouldProcess) {
            # Write-Host "DEBUG: File '$($file.FullName)' PASSED ALL FILTERS." -ForegroundColor Green
            $filteredFileResult.Add($file)
        } else {
            # Write-Host "DEBUG: File '$($file.FullName)' FILTERED OUT. Final Reason: $reasonForFiltering" -ForegroundColor Red
        }
    }
    Write-Host "DEBUG: Get-FilteredFileItems returning $($filteredFileResult.Count) files." -ForegroundColor Yellow
    return $filteredFileResult
}
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Get-FilteredFiles.ps1 ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Read-TextFileContent.ps1 (2261 bytes) ---
# Read-TextFileContent.ps1

function Read-SafeTextFileContent {
    # Function to safely read text file content.
    # For very large files or binary files, it might return a placeholder or partial content.
    param(
        [Parameter(Mandatory=$true)]
        [System.IO.FileInfo]$FileItem,
        [long]$MaxCharsToRead = 1000000 # Limit reading to avoid memory issues with huge files, approx 1MB for UTF-8
    )

    try {
        # Basic check for common binary extensions - can be expanded
        $binaryExtensions = @(".exe", ".dll", ".zip", ".gz", ".tar", ".jpg", ".png", ".gif", ".bmp", ".iso", ".mp3", ".mp4", ".pdf", ".doc", ".xls", ".ppt") # .doc, .xls, .ppt are often binary
        if ($binaryExtensions -contains $FileItem.Extension.ToLowerInvariant()) {
            return "[Binary File: $($FileItem.Name) - Content not displayed]"
        }

        if ($FileItem.Length -eq 0) {
            return "[Empty File: $($FileItem.Name)]"
        }
        
        # Attempt to read as text
        # Using -Raw is faster for reading the whole file
        # We'll use Get-Content with -TotalCount for char limit if necessary
        if ($FileItem.Length -gt ($MaxCharsToRead * 2)) { # Approximation, actual characters depends on encoding
             Write-Warning "File $($FileItem.FullName) is very large ($($FileItem.Length) bytes). Reading up to $MaxCharsToRead characters."
             $content = Get-Content -Path $FileItem.FullName -TotalCount ($MaxCharsToRead / 200) -ErrorAction SilentlyContinue # Approx lines
             # This is a rough way to limit characters, better to read byte stream and decode
             if ($content -is [array]) { $content = $content -join "`n" }
             if ($content.Length -gt $MaxCharsToRead) {
                $content = $content.Substring(0, $MaxCharsToRead) + "... [TRUNCATED]"
             }
             return $content
        } else {
            return Get-Content -Path $FileItem.FullName -Raw -ErrorAction SilentlyContinue
        }
    }
    catch {
        # If Get-Content fails (e.g., encoding issue, locked file)
        return "[Error Reading File: $($FileItem.Name) - $($_.Exception.Message)]"
    }
}

# Removed Export-ModuleMember
--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\Read-TextFileContent.ps1 ---

--- START: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\README.md (8921 bytes) ---
# FolderToLLM

## Overview

`FolderToLLM` is a PowerShell-based utility for Windows designed to help you gather and consolidate project files into a single text file. This output is particularly useful for providing context to Large Language Models (LLMs) by including the directory structure and the content of selected files.

The script will:
1.  Traverse a specified root directory (defaults to the current directory).
2.  Generate a text representation of the entire directory structure.
3.  Concatenate the content of all (or filtered) files found within that structure.
4.  Offer various filtering options to include/exclude specific folders, file extensions, and files based on size.
5.  Output everything into a timestamped `.txt` file (e.g., `LLM_Output_YYYYMMDDHHMMSS.txt`) in the root directory.

![terminal](https://cdn.goygoyengine.com/images/1747926440007-7ba82bbced04e141.gif)

## Features

*   **Directory Structure Output:** Visual tree-like representation of folders and files.
*   **File Content Aggregation:** Reads and appends the content of each selected file.
*   **Flexible Filtering:**
    *   Include/exclude specific folders (relative to the root path).
    *   Include/exclude specific file extensions (e.g., `.txt`, `.py`).
    *   Include/exclude files based on minimum or maximum size (in bytes).
*   **Default Exclusions:** By default, it excludes:
    *   `node_modules` folder.
    *   `.env` files.
    *   Files larger than 1MB.
    (These defaults can be overridden by command-line arguments).
*   **Safe Content Reading:** Attempts to identify and skip binary files, and truncates very large text files to prevent memory issues.
*   **Easy Execution:** Can be run directly or via a helper batch file for convenient access from any directory.

## Prerequisites

*   Windows Operating System.
*   PowerShell (usually comes pre-installed with Windows).

## Setup and Installation

The easiest way to use `FolderToLLM` from any directory is by using the provided `folderToLLM.bat` helper script and adding its location to your system's PATH environment variable.

1.  **Download/Clone the Repository:**
    Download all the `.ps1` files and the `folderToLLM.bat` file from this repository into a single directory on your computer. For example, you might create a folder like `C:\Tools\FolderToLLM`.

2.  **Configure `folderToLLM.bat`:**
    Open the `folderToLLM.bat` file in a text editor. You **must** update the `MAIN_SCRIPT_PATH` variable to point to the **absolute path** of the `CollectAndPrint.ps1` script in the directory where you placed the files.

    ```batch
    @echo off
    REM MODIFY THIS SECTION CAREFULLY!
    REM Full path to the CollectAndPrint.ps1 script:
    set "MAIN_SCRIPT_PATH=C:\Tools\FolderToLLM\CollectAndPrint.ps1" REM <--- UPDATE THIS PATH

    REM ... rest of the file ...
    ```
    Replace `C:\Tools\FolderToLLM\CollectAndPrint.ps1` with the actual path on your system.

3.  **Add the Script Directory to PATH (Recommended):**
    To run `folderToLLM` from any command line or PowerShell window:
    *   Search for "environment variables" in the Windows search bar and select "Edit the system environment variables."
    *   In the System Properties window, click the "Environment Variables..." button.
    *   Under "System variables" (or "User variables" if you only want it for your account), find the variable named `Path` and select it.
    *   Click "Edit...".
    *   Click "New" and add the path to the directory where you saved `folderToLLM.bat` and the `.ps1` scripts (e.g., `C:\Tools\FolderToLLM`).
    *   Click "OK" on all open dialogs to save the changes.
    *   You might need to **restart any open Command Prompt or PowerShell windows** for the PATH changes to take effect.

4.  **Ensure Script Encoding (Important for Special Characters):**
    All `.ps1` script files (`CollectAndPrint.ps1`, `Get-DirectoryStructure.ps1`, etc.) should be saved with **UTF-8 with BOM** encoding. This is crucial for correctly displaying tree characters and handling various text encodings. Most modern text editors (like VS Code, Notepad++) allow you to save files with this specific encoding.
    *   In VS Code: Click the encoding in the bottom-right status bar, select "Save with Encoding," then choose "UTF-8 with BOM."
    *   In Notepad: "File" > "Save As...", then choose "UTF-8 with BOM" from the "Encoding" dropdown.

## Usage

Once set up, open a Command Prompt or PowerShell window, navigate to the project directory you want to process, and run:

```shell
folderToLLM [arguments]
```

If run without arguments, it will process the current directory with default filters.

### Command-Line Arguments

The `CollectAndPrint.ps1` script (and thus `folderToLLM.bat`) accepts the following optional arguments:

*   `-RootPath <string>`: The root directory to process. Defaults to the current directory.
    *   Example: `folderToLLM -RootPath "C:\Projects\MyWebApp"`
*   `-IncludeFolderPaths <string[]>`: Comma-separated list of relative folder paths to include. If specified, only files within these folders (and their subfolders) will have their content read.
    *   Example: `folderToLLM -IncludeFolderPaths "src", "docs"`
*   `-ExcludeFolderPaths <string[]>`: Comma-separated list of relative folder paths to exclude.
    *   Default: `"node_modules"`
    *   Example: `folderToLLM -ExcludeFolderPaths ".git", "dist", "build"`
*   `-IncludeExtensions <string[]>`: Comma-separated list of file extensions to include (e.g., `.txt`, `.py`, `md`). The leading dot is optional.
    *   Example: `folderToLLM -IncludeExtensions ".js", ".css"`
*   `-ExcludeExtensions <string[]>`: Comma-separated list of file extensions to exclude.
    *   Default: `".env"`
    *   Example: `folderToLLM -ExcludeExtensions ".log", ".tmp", ".bak"`
*   `-MinFileSize <long>`: Minimum file size in bytes. Files smaller than this will be excluded. Use `-1` for no minimum limit.
    *   Example: `folderToLLM -MinFileSize 1024` (exclude files smaller than 1KB)
*   `-MaxFileSize <long>`: Maximum file size in bytes. Files larger than this will be excluded. Use `-1` for no maximum limit.
    *   Default: `1048576` (1MB)
    *   Example: `folderToLLM -MaxFileSize 512000` (exclude files larger than 500KB)
*   `-OutputFileNamePrefix <string>`: Prefix for the generated output file.
    *   Default: `"LLM_Output"`
    *   Example: `folderToLLM -OutputFileNamePrefix "ProjectAlpha_Snapshot"`

### Examples

*   **Process the current directory with default filters:**
    ```shell
    folderToLLM
    ```

*   **Process a specific project, only including `.py` and `.md` files, and excluding the `.venv` folder:**
    ```shell
    folderToLLM -RootPath "D:\MyPythonProject" -IncludeExtensions ".py", ".md" -ExcludeFolderPaths ".venv"
    ```

*   **Process the current directory, excluding files larger than 50KB and also excluding `.zip` files:**
    ```shell
    folderToLLM -MaxFileSize 51200 -ExcludeExtensions ".zip"
    ```

## Script Breakdown

The utility is composed of several small PowerShell scripts, each with a specific responsibility:

*   `CollectAndPrint.ps1`: The main script that orchestrates the process, handles parameters, and calls helper scripts.
*   `folderToLLM.bat`: A batch file wrapper for easy execution of `CollectAndPrint.ps1`.
*   `Get-DirectoryStructure.ps1`: Generates the formatted directory tree string.
*   `Get-FilteredFiles.ps1`: Filters files based on the provided criteria (folders, extensions, size). Contains debug logging that can be uncommented for troubleshooting.
*   `Read-TextFileContent.ps1`: Safely reads the content of text files, with checks for binary files and large files.
*   `Format-OutputString.ps1`: Assembles the final output string, including headers, directory structure, and file contents.

## Troubleshooting

*   **"Failed to load helper scripts..."**:
    *   Ensure all `.ps1` files are in the same directory as `CollectAndPrint.ps1`.
    *   Verify the `MAIN_SCRIPT_PATH` in `folderToLLM.bat` is correct.
*   **Garbled characters in directory structure (e.g., `Ã¢â€â€Ã¢â€â‚¬Ã¢â€â‚¬`)**:
    *   Ensure all `.ps1` files are saved with **UTF-8 with BOM** encoding. This is the most common cause.
*   **"The term ... is not recognized as the name of a cmdlet..."**:
    *   This usually means a helper script/function was not loaded correctly. Check file paths and ensure all `.ps1` files are present and correctly encoded.
    *   Restart your PowerShell/Command Prompt window after making changes to scripts or PATH.
*   **Filters not working as expected**:
    *   Uncomment the `Write-Host` debug lines within `Get-FilteredFiles.ps1` to see detailed information about how each file is being processed and why it might be included or excluded.


--- END: C:\Users\Çağrı\Downloads\OTP\FolderToLLM\README.md ---


